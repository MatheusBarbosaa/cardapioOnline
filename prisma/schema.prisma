generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String         @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  // STRIPE
  stripeAccountId String?       @unique // Conta conectada do Stripe
  stripeOnboarded Boolean       @default(false)
  // CONFIGURAÇÕES
  isActive       Boolean        @default(true)
  subscriptionStatus String     @default("trial") // trial, active, suspended
  
  menuCategories MenuCategory[]
  products       Product[]
  orders         Order[]
  users          User[]         // USUÁRIOS DO RESTAURANTE
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}


model User {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String     // Hash da senha
  name         String
  role         UserRole   @default(ADMIN)
  
  // RELACIONAMENTO COM RESTAURANTE
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  
  // CONTROLE DE ACESSO
  isActive     Boolean    @default(true)
  lastLogin    DateTime?
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@index([email])
  @@index([restaurantId])
}

enum UserRole {
  ADMIN     // Dono do restaurante
  MANAGER   // Gerente
  EMPLOYEE  // Funcionário
}
model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  products     Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  orderProducts  OrderProduct[]
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   String
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  menuCategoryId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String
  orderProducts     OrderProduct[]
  customerName      String
  customerCpf       String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model OrderProduct {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  FINISHED
}

enum ConsumptionMethod {
  TAKEAWAY
  DINE_IN
}
